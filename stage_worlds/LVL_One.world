#Configuration to simulate ProAGV

name "Intel_stage"

# simulation timestep in milliseconds
interval_sim 100

# stop the simulation after this many simulated seconds have elapsed
quit_time 0

# set the resolution of the underlying raytrace model in meters
resolution 0.01

#if non-zero, print the simulation time on stdout every $show_clock_interval updates
#show_clock 0

#sets the number of updates between printing the time on stdoutm, if $show_clock is enabled
show_clock_interval 100

#the number of worker threads to spawn. Some models can be updated in parallel (e.g. laser, ranger), and running 2 or more threads here may make the simulation run faster
threads 2

#visualization definition
window
(
	size [851 851]

	center [35.550 16.400]

	rotate [0.0 0.0]

	scale 60.000

	#Perspective Camera

	#Location of Camera
	pcam_loc [0.000 -2.000 2.000]

	#Angle of Camera
	pcam_angle [60.000 0.000]

	#Start Camera enable(1) or not(0)
	pcam_on 0

	# GUI options
	show_data 1
	show_flags 1
	show_blocks 1
	show_clock 1
	show_footprints 0
	show_grid 0
	show_trailarrows 0
	show_trailrise 0
	show_trailfast 0
	show_occupancy 0

	screenshots 0
)

#Map definition
model
(
	name "test_map"

	bitmap "LVL_One.png"
	size [7.500 9.500 2.500]

	pose [35.550 16.400 0.000 180.000]

	origin [0.000 0.000 0.000 0.000]

	color "gray30"

	boundary 0

	#GUI
	gui_move 0
	gui_outline 1

	#Estando a 1 o modelo pode ser visto pelos sensores
	ranger_return 1.000
)

#Definição do sensor (LRF)
define Lidar ranger
(
	sensor(
		range [0 20]
		fov 180
		samples 288
	)

	size [0.050 0.050 0.100]
	color "blue"
)

#Definição da cadeira
define chair position(
	size [1.34 1.00 1.40]

	#select differential-steer model(like a Pioneer), omnidirectional mode or carlike (velocity and steering angle), drive "diff", "omni" or "car"
	drive "car"

  	#if "gps" the position model reports its position with perfect accuracy.
  	#If "odom", a simple odometry model is used and position data drifts from the ground truth over time.
  	#The odometry model is parameterized by the odom_error property
  	localization "gps"

	origin [0.500 0.000 0.000 0.000]

	#Odometry error model parameters,
	#Only used if localization is set to "odom"
	#Parameters for the odometry error model used when specifying localization "odom".
	#Each value is the maximum proportion of error in intergrating x, y, and theta velocities to compute odometric 			position estimate.
	#For each axis, if the the value specified here is E, the actual proportion is chosen at startup at random in the 			range -E/2 to +E/2.
	#Note that due to rounding errors, setting these values to zero does NOT give you perfect localization - for that 			you need to choose localization "gps".
	odom_error [0.001 0.0003 00.00 0.2]

	gui_nose 1

	# Sensores
	Lidar(pose [0.500 0.000 0.000 0.000])
	Lidar(pose [-0.500 0.000 0.000 180.000])
)

define fullAngle_chair position(
	size [1.34 1.00 1.40]

	#select differential-steer model(like a Pioneer), omnidirectional mode or carlike (velocity and steering angle), drive "diff", "omni" or "car"
	drive "car"

  	#if "gps" the position model reports its position with perfect accuracy.
  	#If "odom", a simple odometry model is used and position data drifts from the ground truth over time.
  	#The odometry model is parameterized by the odom_error property
  	localization "gps"

	origin [0.500 0.000 0.000 0.000]

	#Odometry error model parameters,
	#Only used if localization is set to "odom"
	#Parameters for the odometry error model used when specifying localization "odom".
	#Each value is the maximum proportion of error in intergrating x, y, and theta velocities to compute odometric 			position estimate.
	#For each axis, if the the value specified here is E, the actual proportion is chosen at startup at random in the 			range -E/2 to +E/2.
	#Note that due to rounding errors, setting these values to zero does NOT give you perfect localization - for that 			you need to choose localization "gps".
	odom_error [0.001 0.0003 00.00 0.2]

	gui_nose 1

	# Sensores
	Lidar(pose [0.000 0.000 0.000 0.000])
	Lidar(pose [0.000 0.000 0.000 180.000])

	ranger_return 0.000
)

#Criação da cadeira
#chair(
#	name "Intel"
#	pose [35.000 20.000 0.000 270.000]
#	localization "odom"
#	drive "diff"
#	origin [0.0 0.0 0.0 0.0]
#)

fullAngle_chair(
	name "Intel"
	pose [35.000 20.000 0.000 270.000]
	localization "odom"
	drive "diff"
	origin [0.0 0.0 0.0 0.0]
)

#Definição de obstaculo
define obstacle model(
	name "block"
	pose [0.0 0.0 0.0]
	size [1.44 1.48 3.00]
	gui_node 0
	color "black"

	ranger_return 1.000
)

# Obstacles
#obstacle(pose [35.000 18.000 0.000 270.000])
